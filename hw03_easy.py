# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.
# Дробная часть вещественного числа равна остатку от его деления на единицу. 
# Целая часть соответственно равна разности самого числа и его дробной части.
# Чтобы сохранить определенное количество разрядов после запятой число следует сначала сдвинуть влево на соответствующее число разрядов,
# взять его целую часть и сдвинуть обратно в право на столько же разрядов. 
# Сдвиг влево/вправо реализуется умножением/делением на основание системы счисления, возведенное в степень равную количеству сдвигаемых разрядов.

def my_round(number, ndigits):
    ndigits = ndigits +1;
    #сдвигаем влево на необходимое число разрядов   
    n = number*(10**ndigits)
    #определяем в большую или меньшую сторону округляем
    m = n % 10
    #находим целую часть
    n=n-m
    if m >= 5:
       n = n + 10
    #сдвигаем вправо на нужное количество разрядов   
    n = n/(10**ndigits)
    return n

print(my_round(2.1234567, 5))
print(my_round(2.1999967, 5))
print(my_round(2.9999967, 5))


# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def lucky_ticket (ticket_number):
    ls = list(str(ticket_number))
    ln  = len(ls)
#проверка длины номера билета     
    if ln != 6:
        res = 'Error...'
    else:
        num_list = list(map(lambda x: int(x), ls))
        rght = lambda x: sum(x[:3])
        left = lambda x: sum(x[3:])
        if left(num_list) == rght(num_list):
            res = 'Lucky :)'
        else:
            res = 'Not Lucky :('
    return res  
	
print(lucky_ticket(123006))
print(lucky_ticket(12321))
print(lucky_ticket(436751))